@use "../../../../../../../resources/css/tools/functions";
@use "../../../../../../../resources/css/tools/mixins";
@use "sass:string";

// Padding and Margin
// ==================
$sizes: (
        "size-0": functions.space(0),
        "size-1": functions.space(1),
        "size-2": functions.space(2),
        "size-3": functions.space(3),
        "size-4": functions.space(4),
        "size-5": functions.space(5),
        "size-6": functions.space(6),
);

$sides: top, left, bottom, right, inline, inline-start, inline-end, block, block-start, block-end;

@each $size-number, $size-value in $sizes {
  $number: string.slice($size-number, 6);

  .p {
    &-#{$number} {
      padding: $size-value;
    }

    @each $side in $sides {
      &-#{$side}-#{$number} {
        padding-#{$side}: $size-value;
      }
    }
  }

  .m {
    &-#{$number} {
      margin: $size-value;
    }

    @each $side in $sides {
      &-#{$side}-#{$number} {
        margin-#{$side}: $size-value;
      }
    }
  }
}

.m-auto {
  margin: auto;
}

.page-wrapper {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  width: 100%;
  overflow: hidden;
}

.container {
  box-sizing: border-box;
  width: 100%;
  max-width: var(--container-width);
  padding-left: var(--container-padding);
  padding-right: var(--container-padding);
  margin: auto;
}

.bloc {
  background-color: var(--backgroundColor);
  background-image: var(--backgroundDesktop);
  background-position: var(--backgroundXPosition, center) var(--backgroundYPosition, center);
  background-repeat: var(--backgroundRepeat, no-repeat);
  background-size: var(--backgroundSize, cover);
  color: var(--textColor, currentColor);
}

@media (max-width: 1000px) {
  .bloc {
    background-image: var(--backgroundMobile);
  }
}

// Block
// =============
.inline {
  display: inline;
}

// Horizontal
// ==================
.flex {
  display: flex !important;
  align-items: center;
  justify-content: space-between;

  & > * {
    min-width: 0;
  }
}

.end {
  justify-content: flex-end;
}

.stretch {
  align-items: stretch;
}

.flex-md {
  @include mixins.up(500) {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
}

.flex-start {
  justify-content: flex-start;
}

.flex-end {
  justify-content: flex-end;
}

.center {
  display: flex;
  align-items: center;
  justify-content: center;
}

.hstack {
  display: flex;
  flex-wrap: wrap;
  --gap: 2;
  margin: calc(var(--gap) * var(--space) * -0.5);
  margin-bottom: calc(var(--gap) * var(--space) * -1);
  margin-top: 0;

  > * {
    margin-left: calc(var(--gap) * var(--space) * 0.5);
    margin-right: calc(var(--gap) * var(--space) * 0.5);
    margin-bottom: calc(var(--gap) * var(--space));
  }
}


.grid {
  width: 100%;
  display: grid;
  --gap: 0;
  gap: calc(var(--gap) * var(--space));
  grid-template-columns: 1fr;

  &.two {
    --gap: 2;
    grid-template-columns: repeat(2,1fr);
  }

  .full {
    grid-column: 1/-1;
  }
}

.reader-only {
  display: none;
}
